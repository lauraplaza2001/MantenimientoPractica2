DEQUENODE:

  *SETTER
       * setItem
       * setNext
       * setPrevious

    *GETTERS
       * getItem
       * getPrevious
       * getNext

    *BOOLEAN
        * isFirstNode  return true
        * isFirstNode  return false
        * isLastNode   return true
        * isLastNode   return false
        * isNotATerminalNode return true
        * isNotATerminalNode return false

    *CONSTRUCTOR
        * new DequeNode();

DOUBLELINKEDLISTQUEUE:

    * peekFirst() return null when the queue is empty
    * peekFirst() return the element when the queue is not empty
    * peekLast() return null when the queue is empty
    * peekLast() return the element when the queue is not empty

    * size() return 0  empty queue
    * size() return n not empty queue

    * deleteFirst() raise exception when the queue is empty
    * deleteFirst() with one element delete the element correctly
    * deleteFirst() with more than one element delete correctly



    * deleteLast()  raise exception when the queue is empty
    * deleteLast()  with one element delete the element correctly
    * deleteLast() with more than one element delete correctly


    * append()  insert the first node
    * append() insert a node (it is not the first)
    * append() raise an exception when the node that it has to be appended, is not null

    * appendLeft() raise an exception when the node that it has to be appended, is not null
    * appendLeft insert the first node
    * appendLeft() insert a node (not the first one)

    * getAt(int p)   p< 0 raise an exception
    * getAt(int p)  p > size raise an exception
    * getAt(int p) return the element correctly

    * find(Item i) return null if not found
    * find(Item i) return the DequeNode




